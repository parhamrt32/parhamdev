@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);
$layout-values: flex-start, flex-end, center, space-between, space-around,
  space-evenly;
$align-items: stretch, flex-start, flex-end, center, baseline;
$align-self: auto, flex-start, flex-end, center, baseline, stretch;
$flex-grow: 1, 2, 3, 4, 5;
$flex-shrink: 1, 2, 3, 4, 5;
$flex-direction: row, row-reverse, column, column-reverse;
$position: static, relative, fixed, absolute, sticky;
$flex-wrap: nowrap, wrap, wrap-reverse;

// base layout classes
.container {
  width: 100%;
  max-width: 93vw;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
  display: block;
}
.row {
  display: flex;
  flex-flow: row wrap;
}

//flex grow
@each $val in $flex-grow {
  .flex-grow-#{$val} {
    flex-grow: $val !important;
  }
}

//flex shrink
@each $val in $flex-shrink {
  .flex-shrink-#{$val} {
    flex-shrink: $val !important;
  }
}

//flex wrap
@each $val in $flex-wrap {
  .flex-wrap-#{$val} {
    flex-wrap: $val !important;
  }
}

//position
@each $val in $position {
  .position-#{$val} {
    position: $val !important;
  }
}

// grid gaps
@each $key, $val in $grid-gaps {
  .gap-#{$key} {
    gap: $val;
  }
}

// justify content classes
@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val !important;
  }
}

// align self
@each $val in $align-self {
  .align-self-#{$val} {
    align-self: $val !important;
  }
}

//align-items
@each $val in $align-items {
  .align-items-#{$val} {
    align-items: $val !important;
  }
}
//flex-direction
@each $val in $flex-direction {
  .flex-dir-#{$val} {
    flex-direction: $val !important;
  }
}

// col classes
@include xs {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns) !important;
    }
  }
}
@include sm {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns) !important;
    }
  }
}
@include md {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns) !important;
    }
  }
}
@include lg {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns) !important;
    }
  }
}
@include xl {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns) !important;
    }
  }
}
